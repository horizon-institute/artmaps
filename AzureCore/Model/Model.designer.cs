#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArtMaps.Persistence.Context
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="artmapsdev")]
	public partial class ModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAction(ArtMaps.Persistence.Entities.Action instance);
    partial void UpdateAction(ArtMaps.Persistence.Entities.Action instance);
    partial void DeleteAction(ArtMaps.Persistence.Entities.Action instance);
    partial void InsertContext(ArtMaps.Persistence.Entities.Context instance);
    partial void UpdateContext(ArtMaps.Persistence.Entities.Context instance);
    partial void DeleteContext(ArtMaps.Persistence.Entities.Context instance);
    partial void InsertLocation(ArtMaps.Persistence.Entities.Location instance);
    partial void UpdateLocation(ArtMaps.Persistence.Entities.Location instance);
    partial void DeleteLocation(ArtMaps.Persistence.Entities.Location instance);
    partial void InsertLocationNamed(ArtMaps.Persistence.Entities.LocationNamed instance);
    partial void UpdateLocationNamed(ArtMaps.Persistence.Entities.LocationNamed instance);
    partial void DeleteLocationNamed(ArtMaps.Persistence.Entities.LocationNamed instance);
    partial void InsertLocationNamedPart(ArtMaps.Persistence.Entities.LocationNamedPart instance);
    partial void UpdateLocationNamedPart(ArtMaps.Persistence.Entities.LocationNamedPart instance);
    partial void DeleteLocationNamedPart(ArtMaps.Persistence.Entities.LocationNamedPart instance);
    partial void InsertObjectOfInterest(ArtMaps.Persistence.Entities.ObjectOfInterest instance);
    partial void UpdateObjectOfInterest(ArtMaps.Persistence.Entities.ObjectOfInterest instance);
    partial void DeleteObjectOfInterest(ArtMaps.Persistence.Entities.ObjectOfInterest instance);
    partial void InsertUser(ArtMaps.Persistence.Entities.User instance);
    partial void UpdateUser(ArtMaps.Persistence.Entities.User instance);
    partial void DeleteUser(ArtMaps.Persistence.Entities.User instance);
    partial void InsertLocationEllipse(ArtMaps.Persistence.Entities.LocationEllipse instance);
    partial void UpdateLocationEllipse(ArtMaps.Persistence.Entities.LocationEllipse instance);
    partial void DeleteLocationEllipse(ArtMaps.Persistence.Entities.LocationEllipse instance);
    partial void InsertLocationPoint(ArtMaps.Persistence.Entities.LocationPoint instance);
    partial void UpdateLocationPoint(ArtMaps.Persistence.Entities.LocationPoint instance);
    partial void DeleteLocationPoint(ArtMaps.Persistence.Entities.LocationPoint instance);
    partial void InsertLocationPolygon(ArtMaps.Persistence.Entities.LocationPolygon instance);
    partial void UpdateLocationPolygon(ArtMaps.Persistence.Entities.LocationPolygon instance);
    partial void DeleteLocationPolygon(ArtMaps.Persistence.Entities.LocationPolygon instance);
    partial void InsertActionLocation(ArtMaps.Persistence.Entities.ActionLocation instance);
    partial void UpdateActionLocation(ArtMaps.Persistence.Entities.ActionLocation instance);
    partial void DeleteActionLocation(ArtMaps.Persistence.Entities.ActionLocation instance);
    partial void InsertObjectMetadata(ArtMaps.Persistence.Entities.ObjectMetadata instance);
    partial void UpdateObjectMetadata(ArtMaps.Persistence.Entities.ObjectMetadata instance);
    partial void DeleteObjectMetadata(ArtMaps.Persistence.Entities.ObjectMetadata instance);
    partial void InsertPingback(ArtMaps.Persistence.Entities.Pingback instance);
    partial void UpdatePingback(ArtMaps.Persistence.Entities.Pingback instance);
    partial void DeletePingback(ArtMaps.Persistence.Entities.Pingback instance);
    partial void InsertPingbackAction(ArtMaps.Persistence.Entities.PingbackAction instance);
    partial void UpdatePingbackAction(ArtMaps.Persistence.Entities.PingbackAction instance);
    partial void DeletePingbackAction(ArtMaps.Persistence.Entities.PingbackAction instance);
    partial void InsertPingbackLocation(ArtMaps.Persistence.Entities.PingbackLocation instance);
    partial void UpdatePingbackLocation(ArtMaps.Persistence.Entities.PingbackLocation instance);
    partial void DeletePingbackLocation(ArtMaps.Persistence.Entities.PingbackLocation instance);
    partial void InsertPingbackObject(ArtMaps.Persistence.Entities.PingbackObject instance);
    partial void UpdatePingbackObject(ArtMaps.Persistence.Entities.PingbackObject instance);
    partial void DeletePingbackObject(ArtMaps.Persistence.Entities.PingbackObject instance);
    partial void InsertPingbackUser(ArtMaps.Persistence.Entities.PingbackUser instance);
    partial void UpdatePingbackUser(ArtMaps.Persistence.Entities.PingbackUser instance);
    partial void DeletePingbackUser(ArtMaps.Persistence.Entities.PingbackUser instance);
    #endregion
		
		public ModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.Action> Actions
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.Action>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.Context> Contexts
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.Context>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.Location> Locations
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.Location>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.LocationNamed> LocationNameds
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.LocationNamed>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.LocationNamedPart> LocationNamedParts
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.LocationNamedPart>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.ObjectOfInterest> ObjectOfInterests
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.ObjectOfInterest>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.User> Users
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.User>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.LocationEllipse> LocationEllipses
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.LocationEllipse>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.LocationPoint> LocationPoints
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.LocationPoint>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.LocationPolygon> LocationPolygons
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.LocationPolygon>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.ActionLocation> ActionLocations
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.ActionLocation>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.ObjectMetadata> ObjectMetadatas
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.ObjectMetadata>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.Pingback> Pingbacks
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.Pingback>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.PingbackAction> PingbackActions
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.PingbackAction>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.PingbackLocation> PingbackLocations
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.PingbackLocation>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.PingbackObject> PingbackObjects
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.PingbackObject>();
			}
		}
		
		public System.Data.Linq.Table<ArtMaps.Persistence.Entities.PingbackUser> PingbackUsers
		{
			get
			{
				return this.GetTable<ArtMaps.Persistence.Entities.PingbackUser>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.NextID")]
		public ISingleResult<ArtMaps.Persistence.Entities.NextIDResult> NextID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="NVarChar(50)")] string tableName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName);
			return ((ISingleResult<ArtMaps.Persistence.Entities.NextIDResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SelectObjectsWithinBounds")]
		public ISingleResult<ArtMaps.Persistence.Entities.SelectObjectsWithinBoundsResult> SelectObjectsWithinBounds([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> north, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> south, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> east, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> west, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> contextID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), north, south, east, west, contextID);
			return ((ISingleResult<ArtMaps.Persistence.Entities.SelectObjectsWithinBoundsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SelectObjectsWithinBoundsV2", IsComposable=true)]
		public object SelectObjectsWithinBoundsV2([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> north, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> south, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> east, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> west, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> contextID)
		{
			return ((object)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), north, south, east, west, contextID).ReturnValue));
		}
	}
}
namespace ArtMaps.Persistence.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Action")]
	public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private string _URI;
		
		private long _ObjectID;
		
		private long _UserID;
		
		private System.DateTime _DateTime;
		
		private EntitySet<ActionLocation> _ActionLocations;
		
		private EntitySet<PingbackAction> _PingbackActions;
		
		private EntityRef<ObjectOfInterest> _ObjectOfInterest;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnURIChanging(string value);
    partial void OnURIChanged();
    partial void OnObjectIDChanging(long value);
    partial void OnObjectIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    #endregion
		
		public Action()
		{
			this._ActionLocations = new EntitySet<ActionLocation>(new Action<ActionLocation>(this.attach_ActionLocations), new Action<ActionLocation>(this.detach_ActionLocations));
			this._PingbackActions = new EntitySet<PingbackAction>(new Action<PingbackAction>(this.attach_PingbackActions), new Action<PingbackAction>(this.detach_PingbackActions));
			this._ObjectOfInterest = default(EntityRef<ObjectOfInterest>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					if ((this._ObjectOfInterest.HasLoadedOrAssignedValue || this._User.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URI", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string URI
		{
			get
			{
				return this._URI;
			}
			set
			{
				if ((this._URI != value))
				{
					this.OnURIChanging(value);
					this.SendPropertyChanging();
					this._URI = value;
					this.SendPropertyChanged("URI");
					this.OnURIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="BigInt NOT NULL")]
		public long ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					if (this._ObjectOfInterest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_ActionLocation", Storage="_ActionLocations", ThisKey="ID,ContextID", OtherKey="ActionID,ContextID")]
		public EntitySet<ActionLocation> ActionLocations
		{
			get
			{
				return this._ActionLocations;
			}
			set
			{
				this._ActionLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_PingbackAction", Storage="_PingbackActions", ThisKey="ID,ContextID", OtherKey="ActionID,ContextID")]
		public EntitySet<PingbackAction> PingbackActions
		{
			get
			{
				return this._PingbackActions;
			}
			set
			{
				this._PingbackActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectOfInterest_Action", Storage="_ObjectOfInterest", ThisKey="ObjectID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ObjectOfInterest ObjectOfInterest
		{
			get
			{
				return this._ObjectOfInterest.Entity;
			}
			set
			{
				ObjectOfInterest previousValue = this._ObjectOfInterest.Entity;
				if (((previousValue != value) 
							|| (this._ObjectOfInterest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectOfInterest.Entity = null;
						previousValue.Actions.Remove(this);
					}
					this._ObjectOfInterest.Entity = value;
					if ((value != null))
					{
						value.Actions.Add(this);
						this._ObjectID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._ObjectID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("ObjectOfInterest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Action", Storage="_User", ThisKey="UserID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Actions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Actions.Add(this);
						this._UserID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._UserID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActionLocations(ActionLocation entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}
		
		private void detach_ActionLocations(ActionLocation entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}
		
		private void attach_PingbackActions(PingbackAction entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}
		
		private void detach_PingbackActions(PingbackAction entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Context")]
	public partial class Context : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Key;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnKeyChanging(System.Data.Linq.Binary value);
    partial void OnKeyChanged();
    #endregion
		
		public Context()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private short _Source;
		
		private long _ObjectID;
		
		private EntitySet<LocationNamed> _LocationNameds;
		
		private EntitySet<LocationEllipse> _LocationEllipses;
		
		private EntitySet<LocationPoint> _LocationPoints;
		
		private EntitySet<LocationPolygon> _LocationPolygons;
		
		private EntitySet<ActionLocation> _ActionLocations;
		
		private EntitySet<PingbackLocation> _PingbackLocations;
		
		private EntityRef<ObjectOfInterest> _ObjectOfInterest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnSourceChanging(short value);
    partial void OnSourceChanged();
    partial void OnObjectIDChanging(long value);
    partial void OnObjectIDChanged();
    #endregion
		
		public Location()
		{
			this._LocationNameds = new EntitySet<LocationNamed>(new Action<LocationNamed>(this.attach_LocationNameds), new Action<LocationNamed>(this.detach_LocationNameds));
			this._LocationEllipses = new EntitySet<LocationEllipse>(new Action<LocationEllipse>(this.attach_LocationEllipses), new Action<LocationEllipse>(this.detach_LocationEllipses));
			this._LocationPoints = new EntitySet<LocationPoint>(new Action<LocationPoint>(this.attach_LocationPoints), new Action<LocationPoint>(this.detach_LocationPoints));
			this._LocationPolygons = new EntitySet<LocationPolygon>(new Action<LocationPolygon>(this.attach_LocationPolygons), new Action<LocationPolygon>(this.detach_LocationPolygons));
			this._ActionLocations = new EntitySet<ActionLocation>(new Action<ActionLocation>(this.attach_ActionLocations), new Action<ActionLocation>(this.detach_ActionLocations));
			this._PingbackLocations = new EntitySet<PingbackLocation>(new Action<PingbackLocation>(this.attach_PingbackLocations), new Action<PingbackLocation>(this.detach_PingbackLocations));
			this._ObjectOfInterest = default(EntityRef<ObjectOfInterest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					if (this._ObjectOfInterest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="SmallInt NOT NULL")]
		public short Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="BigInt NOT NULL")]
		public long ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					if (this._ObjectOfInterest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationNamed", Storage="_LocationNameds", ThisKey="ID,ContextID", OtherKey="LocationID,ContextID")]
		public EntitySet<LocationNamed> LocationNameds
		{
			get
			{
				return this._LocationNameds;
			}
			set
			{
				this._LocationNameds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationEllipse", Storage="_LocationEllipses", ThisKey="ID,ContextID", OtherKey="LocationID,ContextID")]
		public EntitySet<LocationEllipse> LocationEllipses
		{
			get
			{
				return this._LocationEllipses;
			}
			set
			{
				this._LocationEllipses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationPoint", Storage="_LocationPoints", ThisKey="ID,ContextID", OtherKey="LocationID,ContextID")]
		public EntitySet<LocationPoint> LocationPoints
		{
			get
			{
				return this._LocationPoints;
			}
			set
			{
				this._LocationPoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationPolygon", Storage="_LocationPolygons", ThisKey="ID,ContextID", OtherKey="LocationID,ContextID")]
		public EntitySet<LocationPolygon> LocationPolygons
		{
			get
			{
				return this._LocationPolygons;
			}
			set
			{
				this._LocationPolygons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ActionLocation", Storage="_ActionLocations", ThisKey="ID,ContextID", OtherKey="LocationID,ContextID")]
		public EntitySet<ActionLocation> ActionLocations
		{
			get
			{
				return this._ActionLocations;
			}
			set
			{
				this._ActionLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_PingbackLocation", Storage="_PingbackLocations", ThisKey="ID,ContextID", OtherKey="LocationID,ContextID")]
		public EntitySet<PingbackLocation> PingbackLocations
		{
			get
			{
				return this._PingbackLocations;
			}
			set
			{
				this._PingbackLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectOfInterest_Location", Storage="_ObjectOfInterest", ThisKey="ObjectID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ObjectOfInterest ObjectOfInterest
		{
			get
			{
				return this._ObjectOfInterest.Entity;
			}
			set
			{
				ObjectOfInterest previousValue = this._ObjectOfInterest.Entity;
				if (((previousValue != value) 
							|| (this._ObjectOfInterest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectOfInterest.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._ObjectOfInterest.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._ObjectID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._ObjectID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("ObjectOfInterest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LocationNameds(LocationNamed entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_LocationNameds(LocationNamed entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_LocationEllipses(LocationEllipse entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_LocationEllipses(LocationEllipse entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_LocationPoints(LocationPoint entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_LocationPoints(LocationPoint entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_LocationPolygons(LocationPolygon entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_LocationPolygons(LocationPolygon entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_ActionLocations(ActionLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_ActionLocations(ActionLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_PingbackLocations(PingbackLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_PingbackLocations(PingbackLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationNamed")]
	public partial class LocationNamed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private long _LocationID;
		
		private EntitySet<LocationNamedPart> _LocationNamedParts;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnLocationIDChanging(long value);
    partial void OnLocationIDChanged();
    #endregion
		
		public LocationNamed()
		{
			this._LocationNamedParts = new EntitySet<LocationNamedPart>(new Action<LocationNamedPart>(this.attach_LocationNamedParts), new Action<LocationNamedPart>(this.detach_LocationNamedParts));
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="BigInt NOT NULL")]
		public long LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocationNamed_LocationNamedPart", Storage="_LocationNamedParts", ThisKey="ID,ContextID", OtherKey="LocationNamedID,ContextID")]
		public EntitySet<LocationNamedPart> LocationNamedParts
		{
			get
			{
				return this._LocationNamedParts;
			}
			set
			{
				this._LocationNamedParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationNamed", Storage="_Location", ThisKey="LocationID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.LocationNameds.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.LocationNameds.Add(this);
						this._LocationID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._LocationID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LocationNamedParts(LocationNamedPart entity)
		{
			this.SendPropertyChanging();
			entity.LocationNamed = this;
		}
		
		private void detach_LocationNamedParts(LocationNamedPart entity)
		{
			this.SendPropertyChanging();
			entity.LocationNamed = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationNamedPart")]
	public partial class LocationNamedPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private short _Type;
		
		private string _Part;
		
		private long _LocationNamedID;
		
		private short _Order;
		
		private EntityRef<LocationNamed> _LocationNamed;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnTypeChanging(short value);
    partial void OnTypeChanged();
    partial void OnPartChanging(string value);
    partial void OnPartChanged();
    partial void OnLocationNamedIDChanging(long value);
    partial void OnLocationNamedIDChanged();
    partial void OnOrderChanging(short value);
    partial void OnOrderChanged();
    #endregion
		
		public LocationNamedPart()
		{
			this._LocationNamed = default(EntityRef<LocationNamed>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					if (this._LocationNamed.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="SmallInt NOT NULL")]
		public short Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Part", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Part
		{
			get
			{
				return this._Part;
			}
			set
			{
				if ((this._Part != value))
				{
					this.OnPartChanging(value);
					this.SendPropertyChanging();
					this._Part = value;
					this.SendPropertyChanged("Part");
					this.OnPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationNamedID", DbType="BigInt NOT NULL")]
		public long LocationNamedID
		{
			get
			{
				return this._LocationNamedID;
			}
			set
			{
				if ((this._LocationNamedID != value))
				{
					if (this._LocationNamed.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationNamedIDChanging(value);
					this.SendPropertyChanging();
					this._LocationNamedID = value;
					this.SendPropertyChanged("LocationNamedID");
					this.OnLocationNamedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="SmallInt NOT NULL")]
		public short Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocationNamed_LocationNamedPart", Storage="_LocationNamed", ThisKey="LocationNamedID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LocationNamed LocationNamed
		{
			get
			{
				return this._LocationNamed.Entity;
			}
			set
			{
				LocationNamed previousValue = this._LocationNamed.Entity;
				if (((previousValue != value) 
							|| (this._LocationNamed.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocationNamed.Entity = null;
						previousValue.LocationNamedParts.Remove(this);
					}
					this._LocationNamed.Entity = value;
					if ((value != null))
					{
						value.LocationNamedParts.Add(this);
						this._LocationNamedID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._LocationNamedID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("LocationNamed");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ObjectOfInterest")]
	public partial class ObjectOfInterest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private string _URI;
		
		private EntitySet<Action> _Actions;
		
		private EntitySet<Location> _Locations;
		
		private EntitySet<ObjectMetadata> _ObjectMetadatas;
		
		private EntitySet<PingbackObject> _PingbackObjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnURIChanging(string value);
    partial void OnURIChanged();
    #endregion
		
		public ObjectOfInterest()
		{
			this._Actions = new EntitySet<Action>(new Action<Action>(this.attach_Actions), new Action<Action>(this.detach_Actions));
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			this._ObjectMetadatas = new EntitySet<ObjectMetadata>(new Action<ObjectMetadata>(this.attach_ObjectMetadatas), new Action<ObjectMetadata>(this.detach_ObjectMetadatas));
			this._PingbackObjects = new EntitySet<PingbackObject>(new Action<PingbackObject>(this.attach_PingbackObjects), new Action<PingbackObject>(this.detach_PingbackObjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URI", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string URI
		{
			get
			{
				return this._URI;
			}
			set
			{
				if ((this._URI != value))
				{
					this.OnURIChanging(value);
					this.SendPropertyChanging();
					this._URI = value;
					this.SendPropertyChanged("URI");
					this.OnURIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectOfInterest_Action", Storage="_Actions", ThisKey="ID,ContextID", OtherKey="ObjectID,ContextID")]
		public EntitySet<Action> Actions
		{
			get
			{
				return this._Actions;
			}
			set
			{
				this._Actions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectOfInterest_Location", Storage="_Locations", ThisKey="ID,ContextID", OtherKey="ObjectID,ContextID")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectOfInterest_ObjectMetadata", Storage="_ObjectMetadatas", ThisKey="ID,ContextID", OtherKey="ObjectID,ContextID")]
		public EntitySet<ObjectMetadata> ObjectMetadatas
		{
			get
			{
				return this._ObjectMetadatas;
			}
			set
			{
				this._ObjectMetadatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectOfInterest_PingbackObject", Storage="_PingbackObjects", ThisKey="ID,ContextID", OtherKey="ObjectID,ContextID")]
		public EntitySet<PingbackObject> PingbackObjects
		{
			get
			{
				return this._PingbackObjects;
			}
			set
			{
				this._PingbackObjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Actions(Action entity)
		{
			this.SendPropertyChanging();
			entity.ObjectOfInterest = this;
		}
		
		private void detach_Actions(Action entity)
		{
			this.SendPropertyChanging();
			entity.ObjectOfInterest = null;
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.ObjectOfInterest = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.ObjectOfInterest = null;
		}
		
		private void attach_ObjectMetadatas(ObjectMetadata entity)
		{
			this.SendPropertyChanging();
			entity.ObjectOfInterest = this;
		}
		
		private void detach_ObjectMetadatas(ObjectMetadata entity)
		{
			this.SendPropertyChanging();
			entity.ObjectOfInterest = null;
		}
		
		private void attach_PingbackObjects(PingbackObject entity)
		{
			this.SendPropertyChanging();
			entity.ObjectOfInterest = this;
		}
		
		private void detach_PingbackObjects(PingbackObject entity)
		{
			this.SendPropertyChanging();
			entity.ObjectOfInterest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private string _URI;
		
		private EntitySet<Action> _Actions;
		
		private EntitySet<PingbackUser> _PingbackUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnURIChanging(string value);
    partial void OnURIChanged();
    #endregion
		
		public User()
		{
			this._Actions = new EntitySet<Action>(new Action<Action>(this.attach_Actions), new Action<Action>(this.detach_Actions));
			this._PingbackUsers = new EntitySet<PingbackUser>(new Action<PingbackUser>(this.attach_PingbackUsers), new Action<PingbackUser>(this.detach_PingbackUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URI", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string URI
		{
			get
			{
				return this._URI;
			}
			set
			{
				if ((this._URI != value))
				{
					this.OnURIChanging(value);
					this.SendPropertyChanging();
					this._URI = value;
					this.SendPropertyChanged("URI");
					this.OnURIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Action", Storage="_Actions", ThisKey="ID,ContextID", OtherKey="UserID,ContextID")]
		public EntitySet<Action> Actions
		{
			get
			{
				return this._Actions;
			}
			set
			{
				this._Actions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PingbackUser", Storage="_PingbackUsers", ThisKey="ID,ContextID", OtherKey="UserID,ContextID")]
		public EntitySet<PingbackUser> PingbackUsers
		{
			get
			{
				return this._PingbackUsers;
			}
			set
			{
				this._PingbackUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Actions(Action entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Actions(Action entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PingbackUsers(PingbackUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PingbackUsers(PingbackUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationEllipse")]
	public partial class LocationEllipse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private long _MajorAxis;
		
		private long _MinorAxis;
		
		private double _Angle;
		
		private long _LocationID;
		
		private string _OriginText;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnMajorAxisChanging(long value);
    partial void OnMajorAxisChanged();
    partial void OnMinorAxisChanging(long value);
    partial void OnMinorAxisChanged();
    partial void OnAngleChanging(double value);
    partial void OnAngleChanged();
    partial void OnLocationIDChanging(long value);
    partial void OnLocationIDChanged();
    partial void OnOriginTextChanging(string value);
    partial void OnOriginTextChanged();
    #endregion
		
		public LocationEllipse()
		{
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorAxis", DbType="BigInt NOT NULL")]
		public long MajorAxis
		{
			get
			{
				return this._MajorAxis;
			}
			set
			{
				if ((this._MajorAxis != value))
				{
					this.OnMajorAxisChanging(value);
					this.SendPropertyChanging();
					this._MajorAxis = value;
					this.SendPropertyChanged("MajorAxis");
					this.OnMajorAxisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinorAxis", DbType="BigInt NOT NULL")]
		public long MinorAxis
		{
			get
			{
				return this._MinorAxis;
			}
			set
			{
				if ((this._MinorAxis != value))
				{
					this.OnMinorAxisChanging(value);
					this.SendPropertyChanging();
					this._MinorAxis = value;
					this.SendPropertyChanged("MinorAxis");
					this.OnMinorAxisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Angle", DbType="Float NOT NULL")]
		public double Angle
		{
			get
			{
				return this._Angle;
			}
			set
			{
				if ((this._Angle != value))
				{
					this.OnAngleChanging(value);
					this.SendPropertyChanging();
					this._Angle = value;
					this.SendPropertyChanged("Angle");
					this.OnAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="BigInt NOT NULL")]
		public long LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string OriginText
		{
			get
			{
				return this._OriginText;
			}
			set
			{
				if ((this._OriginText != value))
				{
					this.OnOriginTextChanging(value);
					this.SendPropertyChanging();
					this._OriginText = value;
					this.SendPropertyChanged("OriginText");
					this.OnOriginTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationEllipse", Storage="_Location", ThisKey="LocationID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.LocationEllipses.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.LocationEllipses.Add(this);
						this._LocationID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._LocationID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationPoint")]
	public partial class LocationPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private long _Error;
		
		private long _LocationID;
		
		private string _CenterText;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnErrorChanging(long value);
    partial void OnErrorChanged();
    partial void OnLocationIDChanging(long value);
    partial void OnLocationIDChanged();
    partial void OnCenterTextChanging(string value);
    partial void OnCenterTextChanged();
    #endregion
		
		public LocationPoint()
		{
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Error", DbType="BigInt NOT NULL")]
		public long Error
		{
			get
			{
				return this._Error;
			}
			set
			{
				if ((this._Error != value))
				{
					this.OnErrorChanging(value);
					this.SendPropertyChanging();
					this._Error = value;
					this.SendPropertyChanged("Error");
					this.OnErrorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="BigInt NOT NULL")]
		public long LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CenterText
		{
			get
			{
				return this._CenterText;
			}
			set
			{
				if ((this._CenterText != value))
				{
					this.OnCenterTextChanging(value);
					this.SendPropertyChanging();
					this._CenterText = value;
					this.SendPropertyChanged("CenterText");
					this.OnCenterTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationPoint", Storage="_Location", ThisKey="LocationID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.LocationPoints.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.LocationPoints.Add(this);
						this._LocationID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._LocationID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationPolygon")]
	public partial class LocationPolygon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private long _LocationID;
		
		private string _PointsText;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnLocationIDChanging(long value);
    partial void OnLocationIDChanged();
    partial void OnPointsTextChanging(string value);
    partial void OnPointsTextChanged();
    #endregion
		
		public LocationPolygon()
		{
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="BigInt NOT NULL")]
		public long LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PointsText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PointsText
		{
			get
			{
				return this._PointsText;
			}
			set
			{
				if ((this._PointsText != value))
				{
					this.OnPointsTextChanging(value);
					this.SendPropertyChanging();
					this._PointsText = value;
					this.SendPropertyChanged("PointsText");
					this.OnPointsTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_LocationPolygon", Storage="_Location", ThisKey="LocationID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.LocationPolygons.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.LocationPolygons.Add(this);
						this._LocationID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._LocationID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActionLocation")]
	public partial class ActionLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private long _ActionID;
		
		private long _LocationID;
		
		private EntityRef<Action> _Action;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnActionIDChanging(long value);
    partial void OnActionIDChanged();
    partial void OnLocationIDChanging(long value);
    partial void OnLocationIDChanged();
    #endregion
		
		public ActionLocation()
		{
			this._Action = default(EntityRef<Action>);
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					if ((this._Action.HasLoadedOrAssignedValue || this._Location.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", DbType="BigInt NOT NULL")]
		public long ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="BigInt NOT NULL")]
		public long LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_ActionLocation", Storage="_Action", ThisKey="ActionID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true)]
		public Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				Action previousValue = this._Action.Entity;
				if (((previousValue != value) 
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.ActionLocations.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.ActionLocations.Add(this);
						this._ActionID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._ActionID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ActionLocation", Storage="_Location", ThisKey="LocationID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.ActionLocations.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.ActionLocations.Add(this);
						this._LocationID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._LocationID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ObjectMetadata")]
	public partial class ObjectMetadata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private long _ObjectID;
		
		private string _Name;
		
		private string _Value;
		
		private short _Type;
		
		private EntityRef<ObjectOfInterest> _ObjectOfInterest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnObjectIDChanging(long value);
    partial void OnObjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnTypeChanging(short value);
    partial void OnTypeChanged();
    #endregion
		
		public ObjectMetadata()
		{
			this._ObjectOfInterest = default(EntityRef<ObjectOfInterest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					if (this._ObjectOfInterest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="BigInt NOT NULL")]
		public long ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					if (this._ObjectOfInterest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="SmallInt NOT NULL")]
		public short Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectOfInterest_ObjectMetadata", Storage="_ObjectOfInterest", ThisKey="ObjectID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ObjectOfInterest ObjectOfInterest
		{
			get
			{
				return this._ObjectOfInterest.Entity;
			}
			set
			{
				ObjectOfInterest previousValue = this._ObjectOfInterest.Entity;
				if (((previousValue != value) 
							|| (this._ObjectOfInterest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectOfInterest.Entity = null;
						previousValue.ObjectMetadatas.Remove(this);
					}
					this._ObjectOfInterest.Entity = value;
					if ((value != null))
					{
						value.ObjectMetadatas.Add(this);
						this._ObjectID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._ObjectID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("ObjectOfInterest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pingback")]
	public partial class Pingback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private string _URL;
		
		private System.DateTime _DateTime;
		
		private EntitySet<PingbackAction> _PingbackActions;
		
		private EntitySet<PingbackLocation> _PingbackLocations;
		
		private EntitySet<PingbackObject> _PingbackObjects;
		
		private EntitySet<PingbackUser> _PingbackUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    #endregion
		
		public Pingback()
		{
			this._PingbackActions = new EntitySet<PingbackAction>(new Action<PingbackAction>(this.attach_PingbackActions), new Action<PingbackAction>(this.detach_PingbackActions));
			this._PingbackLocations = new EntitySet<PingbackLocation>(new Action<PingbackLocation>(this.attach_PingbackLocations), new Action<PingbackLocation>(this.detach_PingbackLocations));
			this._PingbackObjects = new EntitySet<PingbackObject>(new Action<PingbackObject>(this.attach_PingbackObjects), new Action<PingbackObject>(this.detach_PingbackObjects));
			this._PingbackUsers = new EntitySet<PingbackUser>(new Action<PingbackUser>(this.attach_PingbackUsers), new Action<PingbackUser>(this.detach_PingbackUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pingback_PingbackAction", Storage="_PingbackActions", ThisKey="ID,ContextID", OtherKey="PingbackID,ContextID")]
		public EntitySet<PingbackAction> PingbackActions
		{
			get
			{
				return this._PingbackActions;
			}
			set
			{
				this._PingbackActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pingback_PingbackLocation", Storage="_PingbackLocations", ThisKey="ID,ContextID", OtherKey="PingbackID,ContextID")]
		public EntitySet<PingbackLocation> PingbackLocations
		{
			get
			{
				return this._PingbackLocations;
			}
			set
			{
				this._PingbackLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pingback_PingbackObject", Storage="_PingbackObjects", ThisKey="ID,ContextID", OtherKey="PingbackID,ContextID")]
		public EntitySet<PingbackObject> PingbackObjects
		{
			get
			{
				return this._PingbackObjects;
			}
			set
			{
				this._PingbackObjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pingback_PingbackUser", Storage="_PingbackUsers", ThisKey="ID,ContextID", OtherKey="PingbackID,ContextID")]
		public EntitySet<PingbackUser> PingbackUsers
		{
			get
			{
				return this._PingbackUsers;
			}
			set
			{
				this._PingbackUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PingbackActions(PingbackAction entity)
		{
			this.SendPropertyChanging();
			entity.Pingback = this;
		}
		
		private void detach_PingbackActions(PingbackAction entity)
		{
			this.SendPropertyChanging();
			entity.Pingback = null;
		}
		
		private void attach_PingbackLocations(PingbackLocation entity)
		{
			this.SendPropertyChanging();
			entity.Pingback = this;
		}
		
		private void detach_PingbackLocations(PingbackLocation entity)
		{
			this.SendPropertyChanging();
			entity.Pingback = null;
		}
		
		private void attach_PingbackObjects(PingbackObject entity)
		{
			this.SendPropertyChanging();
			entity.Pingback = this;
		}
		
		private void detach_PingbackObjects(PingbackObject entity)
		{
			this.SendPropertyChanging();
			entity.Pingback = null;
		}
		
		private void attach_PingbackUsers(PingbackUser entity)
		{
			this.SendPropertyChanging();
			entity.Pingback = this;
		}
		
		private void detach_PingbackUsers(PingbackUser entity)
		{
			this.SendPropertyChanging();
			entity.Pingback = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PingbackAction")]
	public partial class PingbackAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private long _PingbackID;
		
		private long _ActionID;
		
		private EntityRef<Action> _Action;
		
		private EntityRef<Pingback> _Pingback;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnPingbackIDChanging(long value);
    partial void OnPingbackIDChanged();
    partial void OnActionIDChanging(long value);
    partial void OnActionIDChanged();
    #endregion
		
		public PingbackAction()
		{
			this._Action = default(EntityRef<Action>);
			this._Pingback = default(EntityRef<Pingback>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					if ((this._Action.HasLoadedOrAssignedValue || this._Pingback.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PingbackID", DbType="BigInt NOT NULL")]
		public long PingbackID
		{
			get
			{
				return this._PingbackID;
			}
			set
			{
				if ((this._PingbackID != value))
				{
					if (this._Pingback.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPingbackIDChanging(value);
					this.SendPropertyChanging();
					this._PingbackID = value;
					this.SendPropertyChanged("PingbackID");
					this.OnPingbackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", DbType="BigInt NOT NULL")]
		public long ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_PingbackAction", Storage="_Action", ThisKey="ActionID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true)]
		public Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				Action previousValue = this._Action.Entity;
				if (((previousValue != value) 
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.PingbackActions.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.PingbackActions.Add(this);
						this._ActionID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._ActionID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pingback_PingbackAction", Storage="_Pingback", ThisKey="PingbackID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true)]
		public Pingback Pingback
		{
			get
			{
				return this._Pingback.Entity;
			}
			set
			{
				Pingback previousValue = this._Pingback.Entity;
				if (((previousValue != value) 
							|| (this._Pingback.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pingback.Entity = null;
						previousValue.PingbackActions.Remove(this);
					}
					this._Pingback.Entity = value;
					if ((value != null))
					{
						value.PingbackActions.Add(this);
						this._PingbackID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._PingbackID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("Pingback");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PingbackLocation")]
	public partial class PingbackLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private long _PingbackID;
		
		private long _LocationID;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Pingback> _Pingback;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnPingbackIDChanging(long value);
    partial void OnPingbackIDChanged();
    partial void OnLocationIDChanging(long value);
    partial void OnLocationIDChanged();
    #endregion
		
		public PingbackLocation()
		{
			this._Location = default(EntityRef<Location>);
			this._Pingback = default(EntityRef<Pingback>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					if ((this._Location.HasLoadedOrAssignedValue || this._Pingback.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PingbackID", DbType="BigInt NOT NULL")]
		public long PingbackID
		{
			get
			{
				return this._PingbackID;
			}
			set
			{
				if ((this._PingbackID != value))
				{
					if (this._Pingback.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPingbackIDChanging(value);
					this.SendPropertyChanging();
					this._PingbackID = value;
					this.SendPropertyChanged("PingbackID");
					this.OnPingbackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="BigInt NOT NULL")]
		public long LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_PingbackLocation", Storage="_Location", ThisKey="LocationID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.PingbackLocations.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.PingbackLocations.Add(this);
						this._LocationID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._LocationID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pingback_PingbackLocation", Storage="_Pingback", ThisKey="PingbackID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true)]
		public Pingback Pingback
		{
			get
			{
				return this._Pingback.Entity;
			}
			set
			{
				Pingback previousValue = this._Pingback.Entity;
				if (((previousValue != value) 
							|| (this._Pingback.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pingback.Entity = null;
						previousValue.PingbackLocations.Remove(this);
					}
					this._Pingback.Entity = value;
					if ((value != null))
					{
						value.PingbackLocations.Add(this);
						this._PingbackID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._PingbackID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("Pingback");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PingbackObject")]
	public partial class PingbackObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private long _PingbackID;
		
		private long _ObjectID;
		
		private EntityRef<ObjectOfInterest> _ObjectOfInterest;
		
		private EntityRef<Pingback> _Pingback;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnPingbackIDChanging(long value);
    partial void OnPingbackIDChanged();
    partial void OnObjectIDChanging(long value);
    partial void OnObjectIDChanged();
    #endregion
		
		public PingbackObject()
		{
			this._ObjectOfInterest = default(EntityRef<ObjectOfInterest>);
			this._Pingback = default(EntityRef<Pingback>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					if ((this._ObjectOfInterest.HasLoadedOrAssignedValue || this._Pingback.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PingbackID", DbType="BigInt NOT NULL")]
		public long PingbackID
		{
			get
			{
				return this._PingbackID;
			}
			set
			{
				if ((this._PingbackID != value))
				{
					if (this._Pingback.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPingbackIDChanging(value);
					this.SendPropertyChanging();
					this._PingbackID = value;
					this.SendPropertyChanged("PingbackID");
					this.OnPingbackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="BigInt NOT NULL")]
		public long ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					if (this._ObjectOfInterest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectOfInterest_PingbackObject", Storage="_ObjectOfInterest", ThisKey="ObjectID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true)]
		public ObjectOfInterest ObjectOfInterest
		{
			get
			{
				return this._ObjectOfInterest.Entity;
			}
			set
			{
				ObjectOfInterest previousValue = this._ObjectOfInterest.Entity;
				if (((previousValue != value) 
							|| (this._ObjectOfInterest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectOfInterest.Entity = null;
						previousValue.PingbackObjects.Remove(this);
					}
					this._ObjectOfInterest.Entity = value;
					if ((value != null))
					{
						value.PingbackObjects.Add(this);
						this._ObjectID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._ObjectID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("ObjectOfInterest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pingback_PingbackObject", Storage="_Pingback", ThisKey="PingbackID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true)]
		public Pingback Pingback
		{
			get
			{
				return this._Pingback.Entity;
			}
			set
			{
				Pingback previousValue = this._Pingback.Entity;
				if (((previousValue != value) 
							|| (this._Pingback.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pingback.Entity = null;
						previousValue.PingbackObjects.Remove(this);
					}
					this._Pingback.Entity = value;
					if ((value != null))
					{
						value.PingbackObjects.Add(this);
						this._PingbackID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._PingbackID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("Pingback");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PingbackUser")]
	public partial class PingbackUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ContextID;
		
		private long _PingbackID;
		
		private long _UserID;
		
		private EntityRef<Pingback> _Pingback;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnContextIDChanging(long value);
    partial void OnContextIDChanged();
    partial void OnPingbackIDChanging(long value);
    partial void OnPingbackIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    #endregion
		
		public PingbackUser()
		{
			this._Pingback = default(EntityRef<Pingback>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					if ((this._Pingback.HasLoadedOrAssignedValue || this._User.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContextIDChanging(value);
					this.SendPropertyChanging();
					this._ContextID = value;
					this.SendPropertyChanged("ContextID");
					this.OnContextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PingbackID", DbType="BigInt NOT NULL")]
		public long PingbackID
		{
			get
			{
				return this._PingbackID;
			}
			set
			{
				if ((this._PingbackID != value))
				{
					if (this._Pingback.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPingbackIDChanging(value);
					this.SendPropertyChanging();
					this._PingbackID = value;
					this.SendPropertyChanged("PingbackID");
					this.OnPingbackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pingback_PingbackUser", Storage="_Pingback", ThisKey="PingbackID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true)]
		public Pingback Pingback
		{
			get
			{
				return this._Pingback.Entity;
			}
			set
			{
				Pingback previousValue = this._Pingback.Entity;
				if (((previousValue != value) 
							|| (this._Pingback.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pingback.Entity = null;
						previousValue.PingbackUsers.Remove(this);
					}
					this._Pingback.Entity = value;
					if ((value != null))
					{
						value.PingbackUsers.Add(this);
						this._PingbackID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._PingbackID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("Pingback");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PingbackUser", Storage="_User", ThisKey="UserID,ContextID", OtherKey="ID,ContextID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PingbackUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PingbackUsers.Add(this);
						this._UserID = value.ID;
						this._ContextID = value.ContextID;
					}
					else
					{
						this._UserID = default(long);
						this._ContextID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class NextIDResult
	{
		
		private long _CurrentID;
		
		public NextIDResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentID", DbType="BigInt NOT NULL")]
		public long CurrentID
		{
			get
			{
				return this._CurrentID;
			}
			set
			{
				if ((this._CurrentID != value))
				{
					this._CurrentID = value;
				}
			}
		}
	}
	
	public partial class SelectObjectsWithinBoundsResult
	{
		
		private long _ID;
		
		private long _ContextID;
		
		private string _URI;
		
		private string _Locations;
		
		private string _Actions;
		
		public SelectObjectsWithinBoundsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL")]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextID", DbType="BigInt NOT NULL")]
		public long ContextID
		{
			get
			{
				return this._ContextID;
			}
			set
			{
				if ((this._ContextID != value))
				{
					this._ContextID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URI", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string URI
		{
			get
			{
				return this._URI;
			}
			set
			{
				if ((this._URI != value))
				{
					this._URI = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Locations", DbType="NVarChar(MAX)")]
		public string Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				if ((this._Locations != value))
				{
					this._Locations = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Actions", DbType="NVarChar(MAX)")]
		public string Actions
		{
			get
			{
				return this._Actions;
			}
			set
			{
				if ((this._Actions != value))
				{
					this._Actions = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
